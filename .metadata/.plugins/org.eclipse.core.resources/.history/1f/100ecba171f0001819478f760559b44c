package LinkedList;

import java.util.HashSet;
import java.util.Set;

import LinkedList.Partition.Node;

public class Intersection {
	static Node head;
	static class Node{
		int data;
		Node next;
		
		Node(int d){
			data = d;
			next = null;
		}
	}
	void push(int new_data) 
    { 
        /* 1 & 2: Allocate the Node & 
        Put in the data*/
        Node new_node = new Node(new_data); 
      
        /* 3. Make next of new Node as head */
        new_node.next = head; 
      
        /* 4. Move the head to point to new Node */
        head = new_node; 
    } 
	public Node intersecting(Node l1, Node l2) {
		Set<Node> seen = new HashSet<>();
		Node pa = l1;
		while(pa != null) {
			seen.add(pa);
			pa = pa.next;
		}
		Node pb = l2;
		while(pb != null) {
			if(seen.contains(pb)) {
				return pb;
			}
		}
		return null;
	}
	 void printList() 
	    { 
	        Node temp = head; 
	        while(temp != null) 
	        { 
	            System.out.print(temp.data+" "); 
	            temp = temp.next; 
	        } 
	        System.out.println(); 
	    } 
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Intersection a = new Intersection();
		
		a.push(1);
		a.push(2);
		a.push(3);
		a.push(4);
		a.push(7);
		a.printList();
		Intersection b = new Intersection();
		b.push(9);
		b.push(8);
		b.push(7);
		b.push(6);
		b.push(5);
		b.printList();
		
		
		
		//Node value = list.intersecting(list1.head, list2.head);
		
		
		//System.out.println(value.data);
		
	}

}
